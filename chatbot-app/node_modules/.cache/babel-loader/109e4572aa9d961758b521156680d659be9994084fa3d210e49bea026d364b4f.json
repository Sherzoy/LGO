{"ast":null,"code":"var _jsxFileName = \"/home/sherzoy/Files/MLBusiness/LGO Model/LBO2/LGO/chatbot-app/src/components/Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './Chatbot.css';\nimport XLSX from 'xlsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exportToExcel = () => {\n  const dataToExport = botResponse; // Modify this based on your data structure\n\n  const wb = XLSX.utils.book_new();\n  const ws = XLSX.utils.json_to_sheet([dataToExport]);\n  XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n\n  // Generate buffer for the Excel file\n  const buf = XLSX.write(wb, {\n    type: 'buffer',\n    bookType: 'xlsx'\n  });\n\n  // Create a Blob from the buffer\n  const blob = new Blob([buf], {\n    type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n  });\n\n  // Create a temporary anchor element to trigger the download\n  const a = document.createElement('a');\n  a.href = URL.createObjectURL(blob);\n  a.download = 'data.xlsx';\n  a.click();\n\n  // Clean up the URL and remove the anchor\n  setTimeout(() => {\n    URL.revokeObjectURL(a.href);\n  }, 100);\n};\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [botResponse, setBotResponse] = useState({});\n  const handleValueChange = (section, key, newValue) => {\n    setBotResponse(prevResponse => ({\n      ...prevResponse,\n      [section]: {\n        ...prevResponse[section],\n        [key]: newValue\n      }\n    }));\n  };\n  const convertValuesToFloat = obj => {\n    const convertedObj = {};\n    for (const key in obj) {\n      if (typeof obj[key] === 'object') {\n        convertedObj[key] = convertValuesToFloat(obj[key]);\n      } else if (!isNaN(parseFloat(obj[key]))) {\n        convertedObj[key] = parseFloat(obj[key]);\n      } else {\n        convertedObj[key] = obj[key];\n      }\n    }\n    return convertedObj;\n  };\n  const formatBotResponse = response => {\n    // Convert the dictionary object to an array of [key, value] pairs\n    const keyValuePairs = Object.entries(response);\n\n    // Create a <div> element for each key-value pair\n    return keyValuePairs.map(([key, value], index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: `| ${key} | ${value} |`\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this));\n  };\n  const sendMessage = async () => {\n    if (inputValue.trim() === '') return;\n    const newMessage = {\n      text: inputValue,\n      fromUser: true\n    };\n    setMessages([...messages, newMessage]);\n    setInputValue('');\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/api/chatbot', {\n        message: inputValue\n      });\n      setBotResponse(JSON.parse(response.data.message));\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  const handleSubmit = async () => {\n    try {\n      const convertedEntryAss = convertValuesToFloat(botResponse.entry_ass);\n      const convertedIsAss = convertValuesToFloat(botResponse.is_ass);\n      const response = await axios.post('http://127.0.0.1:5000/api/submit', {\n        entry_ass: convertedEntryAss,\n        is_ass: convertedIsAss\n      });\n      const botMessage = {\n        text: formatBotResponse(response.data.message),\n        fromUser: false\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    } catch (error) {\n      console.error('Error submitting data:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatbot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: message.fromUser ? 'user-message' : 'bot-message',\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value),\n        onKeyPress: e => {\n          if (e.key === 'Enter') {\n            sendMessage();\n          }\n        },\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bot-response-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Entry Assumptions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), Object.keys(botResponse.entry_ass || {}).length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Key\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.entries(botResponse.entry_ass || {}).map(([key, value], index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: key\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: value,\n                onChange: e => handleValueChange('entry_ass', key, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No entry assumptions from the bot yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bot-response-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Interest Assumptions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), Object.keys(botResponse.is_ass || {}).length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Key\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.entries(botResponse.is_ass || {}).map(([key, value], index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: key\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: value,\n                onChange: e => handleValueChange('is_ass', key, e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No interest assumptions from the bot yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bot-response-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Excel Table Output\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }, this), Object.keys(botResponse).length > 0 ? /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Key\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Value\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: Object.entries(botResponse).map(([key, value], index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: key\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data available for Excel output yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"submit-button\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-button\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exportToExcel,\n        children: \"Export to Excel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"IEE+L8EHFuU5kat7vtP/OCp1RvI=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","XLSX","jsxDEV","_jsxDEV","exportToExcel","dataToExport","botResponse","wb","utils","book_new","ws","json_to_sheet","book_append_sheet","buf","write","type","bookType","blob","Blob","a","document","createElement","href","URL","createObjectURL","download","click","setTimeout","revokeObjectURL","Chatbot","_s","messages","setMessages","inputValue","setInputValue","setBotResponse","handleValueChange","section","key","newValue","prevResponse","convertValuesToFloat","obj","convertedObj","isNaN","parseFloat","formatBotResponse","response","keyValuePairs","Object","entries","map","value","index","children","fileName","_jsxFileName","lineNumber","columnNumber","sendMessage","trim","newMessage","text","fromUser","post","message","JSON","parse","data","error","console","handleSubmit","convertedEntryAss","entry_ass","convertedIsAss","is_ass","botMessage","prevMessages","className","onChange","e","target","onKeyPress","placeholder","onClick","keys","length","_c","$RefreshReg$"],"sources":["/home/sherzoy/Files/MLBusiness/LGO Model/LBO2/LGO/chatbot-app/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './Chatbot.css';\nimport XLSX from 'xlsx';\n\nconst exportToExcel = () => {\n  const dataToExport = botResponse; // Modify this based on your data structure\n\n  const wb = XLSX.utils.book_new();\n  const ws = XLSX.utils.json_to_sheet([dataToExport]);\n  XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n\n  // Generate buffer for the Excel file\n  const buf = XLSX.write(wb, { type: 'buffer', bookType: 'xlsx' });\n\n  // Create a Blob from the buffer\n  const blob = new Blob([buf], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n\n  // Create a temporary anchor element to trigger the download\n  const a = document.createElement('a');\n  a.href = URL.createObjectURL(blob);\n  a.download = 'data.xlsx';\n  a.click();\n\n  // Clean up the URL and remove the anchor\n  setTimeout(() => {\n    URL.revokeObjectURL(a.href);\n  }, 100);\n};\n\nconst Chatbot = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [botResponse, setBotResponse] = useState({});\n\n  const handleValueChange = (section, key, newValue) => {\n    setBotResponse((prevResponse) => ({\n      ...prevResponse,\n      [section]: {\n        ...prevResponse[section],\n        [key]: newValue,\n      },\n    }));\n  };\n\n  const convertValuesToFloat = (obj) => {\n    const convertedObj = {};\n    \n    for (const key in obj) {\n      if (typeof obj[key] === 'object') {\n        convertedObj[key] = convertValuesToFloat(obj[key]);\n      } else if (!isNaN(parseFloat(obj[key]))) {\n        convertedObj[key] = parseFloat(obj[key]);\n      } else {\n        convertedObj[key] = obj[key];\n      }\n    }\n    \n    return convertedObj;\n  };\n\n  const formatBotResponse = (response) => {\n    // Convert the dictionary object to an array of [key, value] pairs\n    const keyValuePairs = Object.entries(response);\n  \n    // Create a <div> element for each key-value pair\n    return keyValuePairs.map(([key, value], index) => (\n      <div key={index}>\n        {`| ${key} | ${value} |`}\n      </div>\n    ));\n  };\n\n  const sendMessage = async () => {\n    if (inputValue.trim() === '') return;\n\n    const newMessage = { text: inputValue, fromUser: true };\n    setMessages([...messages, newMessage]);\n    setInputValue('');\n\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/api/chatbot', {\n        message: inputValue,\n      });\n      setBotResponse(JSON.parse(response.data.message));\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  const handleSubmit = async () => {\n    try {\n      const convertedEntryAss = convertValuesToFloat(botResponse.entry_ass);\n      const convertedIsAss = convertValuesToFloat(botResponse.is_ass);\n      const response = await axios.post('http://127.0.0.1:5000/api/submit', {\n        entry_ass: convertedEntryAss,\n        is_ass: convertedIsAss,\n      });\n\n      const botMessage = { text: formatBotResponse(response.data.message), fromUser: false };\n      setMessages((prevMessages) => [...prevMessages, botMessage]);\n    } catch (error) {\n      console.error('Error submitting data:', error);\n    }\n  };\n\n  return (\n    <div className=\"chatbot-container\">\n      <div className=\"chatbot-messages\">\n        {messages.map((message, index) => (\n          <div key={index} className={message.fromUser ? 'user-message' : 'bot-message'}>\n            {message.text}\n          </div>\n        ))}\n      </div>\n      <div className=\"chatbot-input\">\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          onKeyPress={(e) => {\n            if (e.key === 'Enter') {\n              sendMessage();\n            }\n          }}\n          placeholder=\"Type your message...\"\n        />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n      <div className=\"bot-response-table\">\n        <h3>Entry Assumptions:</h3>\n        {Object.keys(botResponse.entry_ass || {}).length > 0 ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Key</th>\n                <th>Value</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(botResponse.entry_ass || {}).map(([key, value], index) => (\n                <tr key={index}>\n                  <td>{key}</td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      value={value}\n                      onChange={(e) => handleValueChange('entry_ass', key, e.target.value)}\n                    />\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          <p>No entry assumptions from the bot yet.</p>\n        )}\n      </div>\n      <div className=\"bot-response-table\">\n        <h3>Interest Assumptions:</h3>\n        {Object.keys(botResponse.is_ass || {}).length > 0 ? (\n          <table>\n            <thead>\n              <tr>\n                <th>Key</th>\n                <th>Value</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(botResponse.is_ass || {}).map(([key, value], index) => (\n                <tr key={index}>\n                  <td>{key}</td>\n                  <td>\n                    <input\n                      type=\"text\"\n                      value={value}\n                      onChange={(e) => handleValueChange('is_ass', key, e.target.value)}\n                    />\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          <p>No interest assumptions from the bot yet.</p>\n        )}\n      </div>\n      <div className=\"bot-response-table\">\n      <h3>Excel Table Output</h3>\n      {Object.keys(botResponse).length > 0 ? (\n        <table>\n          <thead>\n            <tr>\n              <th>Key</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(botResponse).map(([key, value], index) => (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>{value}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p>No data available for Excel output yet.</p>\n      )}\n    </div>\n      <div className=\"submit-button\">\n        <button onClick={handleSubmit}>Submit</button>\n      </div>\n\n      <div className=\"export-button\">\n      <button onClick={exportToExcel}>Export to Excel</button>\n    </div>\n    \n    </div>\n    \n    \n  );\n};\n\nexport default Chatbot;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}